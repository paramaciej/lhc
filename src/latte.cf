-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type PIdent PParBegin [Arg] PParEnd Block ;

ClsDef.    TopDef ::= PClass PIdent ClassBody ;

ClsDefExt. TopDef ::= PClass PIdent PExtends PIdent ClassBody ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type PIdent;

separator  Arg "," ;

-- classes ------------------------------------------------

ClassBody. ClassBody ::= PCurlyBegin [ClassStmt] PCurlyEnd ;

separator  ClassStmt "" ;

Attr.      ClassStmt ::= Type [AttrItem] PSemicolon;

AttrItem.  AttrItem ::= PIdent ;

separator nonempty AttrItem "," ;

Method.    ClassStmt ::= Type PIdent PParBegin [Arg] PParEnd Block ;

-- statements ----------------------------------------------

Block.     Block ::= PCurlyBegin [Stmt] PCurlyEnd ;

separator  Stmt "" ;

Empty.     Stmt ::= PSemicolon ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] PSemicolon ;

NoInit.    Item ::= PIdent ;

Init.      Item ::= PIdent PAss Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= PIdent PAss Expr  PSemicolon ;

Incr.      Stmt ::= PIdent PIncr  PSemicolon ;

Decr.      Stmt ::= PIdent PDecr  PSemicolon ;

Ret.       Stmt ::= PRet Expr PSemicolon ;

VRet.      Stmt ::= PRet PSemicolon ;

Cond.      Stmt ::= PIf PParBegin Expr PParEnd Stmt  ;

CondElse.  Stmt ::= PIf PParBegin Expr PParEnd Stmt PElse Stmt  ;

While.     Stmt ::= PWhile PParBegin Expr PParEnd Stmt ;

SExp.      Stmt ::= Expr  PSemicolon ;

-- Types ---------------------------------------------------

Int.       Type ::= PInt ;

Str.       Type ::= PStr ;

Bool.      Type ::= PBool ;

Void.      Type ::= PVoid ;

internal   Fun. Type ::= Type PParBegin [Type] PParEnd ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= PIdent ;

ELitInt.   Expr6 ::= PInteger ;

ELitTrue.  Expr6 ::= PTrue ;

ELitFalse. Expr6 ::= PFalse ;

EApp.      Expr6 ::= PIdent PParBegin [Expr] PParEnd ;

EString.   Expr6 ::= PString ;

Neg.       Expr5 ::= PMinus Expr6 ;

Not.       Expr5 ::= PNot Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 PAnd Expr1 ;

EOr.       Expr ::= Expr1 POr Expr ;

_.         Expr ::= Expr1 ;
_.         Expr1 ::= Expr2 ;
_.         Expr2 ::= Expr3 ;
_.         Expr3 ::= Expr4 ;
_.         Expr4 ::= Expr5 ;
_.         Expr5 ::= Expr6 ;
ECoerc.    Expr6 ::= PParBegin Expr PParEnd ;


separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= PPlus ;

Minus.     AddOp ::= PMinus ;

Times.     MulOp ::= PTimes ;

Div.       MulOp ::= PDiv ;

Mod.       MulOp ::= PMod ;

LTH.       RelOp ::= PLTH ;

LE.        RelOp ::= PLE ;

GTH.       RelOp ::= PGTH ;

GE.        RelOp ::= PGE ;

EQU.       RelOp ::= PEQU ;

NE.        RelOp ::= PNE ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

-- position token ------------------------------------------

position token PClass {"class"};
position token PExtends {"extends"};

position token PInt {"int"};
position token PStr {"string"};
position token PBool {"boolean"};
position token PVoid {"void"};

position token PRet {"return"};
position token PIf {"if"};
position token PElse {"else"};
position token PWhile {"while"};

position token PSemicolon {";"};
position token PCurlyBegin {"{"};
position token PCurlyEnd {"}"};
position token PParBegin {"("};
position token PParEnd {")"};

position token PAss {"="};

position token PIncr {"++"};
position token PDecr {"--"};

position token PPlus {"+"};
position token PMinus {"-"};
position token PTimes {"*"};
position token PDiv {"/"};
position token PMod {"%"};

position token PLTH {"<"};
position token PLE {"<="};
position token PGTH {">"};
position token PGE {">="};
position token PEQU {"=="};
position token PNE {"!="};

position token PNot {"!"};
position token PAnd {"&&"};
position token POr {"||"};

position token PFalse {"false"};
position token PTrue {"true"};
position token PInteger (digit+);
position token PString ('"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"');

position token PIdent (letter (letter | digit | '_' | '\'')*);
